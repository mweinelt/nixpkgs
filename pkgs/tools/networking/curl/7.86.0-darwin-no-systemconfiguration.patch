On darwin, providing SystemConfiguration to curl currently results in a
reference loop, so we have to disable the check for it and the feature
which requires it (NAT64).

Patching actual configure script here as we also don't want to require
autoconf in the bootstrap loop just to regenerate a patched configure.ac.

diff --git a/configure b/configure
index fdad6a8..14cb03a 100755
--- a/configure
+++ b/configure
@@ -21154,7 +21154,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.beam conftest.$ac_ext
     if test "x$build_for_macos" != xno; then
       { printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: yes" >&5
 printf "%s\n" "yes" >&6; }
-      LDFLAGS="$LDFLAGS -framework CoreFoundation -framework SystemConfiguration"
+      LDFLAGS="$LDFLAGS -framework CoreFoundation"
     else
       { printf "%s\n" "$as_me:${as_lineno-$LINENO}: result: no" >&5
 printf "%s\n" "no" >&6; }
@@ -22512,9 +22512,6 @@ fi
 
 fi
 
-if test "$HAVE_GETHOSTBYNAME" != "1"; then
-  as_fn_error $? "couldn't find libraries for gethostbyname()" "$LINENO" 5
-fi
 
 
 curl_includes_winsock2="\
diff --git a/lib/curl_setup.h b/lib/curl_setup.h
index ac27b13..7d966d4 100644
--- a/lib/curl_setup.h
+++ b/lib/curl_setup.h
@@ -246,18 +246,6 @@
 
 #include <curl/system.h>
 
-/*
- * Use getaddrinfo to resolve the IPv4 address literal. If the current network
- * interface doesn't support IPv4, but supports IPv6, NAT64, and DNS64,
- * performing this task will result in a synthesized IPv6 address.
- */
-#if defined(__APPLE__) && !defined(USE_ARES)
-#include <TargetConditionals.h>
-#define USE_RESOLVE_ON_IPS 1
-#  if defined(TARGET_OS_OSX) && TARGET_OS_OSX
-#    define CURL_OSX_CALL_COPYPROXIES 1
-#  endif
-#endif
 
 #ifdef USE_LWIPSOCK
 #  include <lwip/init.h>

